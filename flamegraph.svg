<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="502" onload="init(evt)" viewBox="0 0 1200 502" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="502" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="485.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="485.00"> </text><svg id="frames" x="10" width="1180" total_samples="174"><g><title>dyld`_dyld_start (1 samples, 0.57%)</title><rect x="0.0000%" y="421" width="0.5747%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="1"/><text x="0.2500%" y="431.50"></text></g><g><title>dyld`dyldbootstrap::start (1 samples, 0.57%)</title><rect x="0.0000%" y="405" width="0.5747%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="1"/><text x="0.2500%" y="415.50"></text></g><g><title>dyld`dyld::_main (1 samples, 0.57%)</title><rect x="0.0000%" y="389" width="0.5747%" height="15" fill="rgb(221,193,54)" fg:x="0" fg:w="1"/><text x="0.2500%" y="399.50"></text></g><g><title>dyld`dyld::notifyMonitoringDyldMain (1 samples, 0.57%)</title><rect x="0.0000%" y="373" width="0.5747%" height="15" fill="rgb(248,212,6)" fg:x="0" fg:w="1"/><text x="0.2500%" y="383.50"></text></g><g><title>dyld`dyld::sendMessage (1 samples, 0.57%)</title><rect x="0.0000%" y="357" width="0.5747%" height="15" fill="rgb(208,68,35)" fg:x="0" fg:w="1"/><text x="0.2500%" y="367.50"></text></g><g><title>dyld`mach_msg_trap (1 samples, 0.57%)</title><rect x="0.0000%" y="341" width="0.5747%" height="15" fill="rgb(232,128,0)" fg:x="0" fg:w="1"/><text x="0.2500%" y="351.50"></text></g><g><title>libsystem_malloc.dylib`malloc (1 samples, 0.57%)</title><rect x="0.5747%" y="325" width="0.5747%" height="15" fill="rgb(207,160,47)" fg:x="1" fg:w="1"/><text x="0.8247%" y="335.50"></text></g><g><title>mine`console::term::Term::read_char (1 samples, 0.57%)</title><rect x="1.1494%" y="325" width="0.5747%" height="15" fill="rgb(228,23,34)" fg:x="2" fg:w="1"/><text x="1.3994%" y="335.50"></text></g><g><title>mine`console::unix_term::read_single_key (1 samples, 0.57%)</title><rect x="1.1494%" y="309" width="0.5747%" height="15" fill="rgb(218,30,26)" fg:x="2" fg:w="1"/><text x="1.3994%" y="319.50"></text></g><g><title>libsystem_c.dylib`tcsetattr (1 samples, 0.57%)</title><rect x="1.1494%" y="293" width="0.5747%" height="15" fill="rgb(220,122,19)" fg:x="2" fg:w="1"/><text x="1.3994%" y="303.50"></text></g><g><title>libsystem_kernel.dylib`__ioctl (1 samples, 0.57%)</title><rect x="1.1494%" y="277" width="0.5747%" height="15" fill="rgb(250,228,42)" fg:x="2" fg:w="1"/><text x="1.3994%" y="287.50"></text></g><g><title>libsystem_c.dylib`tcsetattr (1 samples, 0.57%)</title><rect x="1.7241%" y="309" width="0.5747%" height="15" fill="rgb(240,193,28)" fg:x="3" fg:w="1"/><text x="1.9741%" y="319.50"></text></g><g><title>libsystem_kernel.dylib`poll (8 samples, 4.60%)</title><rect x="2.2989%" y="309" width="4.5977%" height="15" fill="rgb(216,20,37)" fg:x="4" fg:w="8"/><text x="2.5489%" y="319.50">libsy..</text></g><g><title>mine`0x10d5eb028 (1 samples, 0.57%)</title><rect x="6.8966%" y="309" width="0.5747%" height="15" fill="rgb(206,188,39)" fg:x="12" fg:w="1"/><text x="7.1466%" y="319.50"></text></g><g><title>libdyld.dylib`dyld_stub_binder (1 samples, 0.57%)</title><rect x="6.8966%" y="293" width="0.5747%" height="15" fill="rgb(217,207,13)" fg:x="12" fg:w="1"/><text x="7.1466%" y="303.50"></text></g><g><title>dyld`dyld::fastBindLazySymbol (1 samples, 0.57%)</title><rect x="6.8966%" y="277" width="0.5747%" height="15" fill="rgb(231,73,38)" fg:x="12" fg:w="1"/><text x="7.1466%" y="287.50"></text></g><g><title>dyld`ImageLoaderMachOCompressed::doBindFastLazySymbol(unsigned int, ImageLoader::LinkContext const&amp;, void (*)(), void (*) (1 samples, 0.57%)</title><rect x="6.8966%" y="261" width="0.5747%" height="15" fill="rgb(225,20,46)" fg:x="12" fg:w="1"/><text x="7.1466%" y="271.50"></text></g><g><title>dyld`ImageLoaderMachOCompressed::resolve (1 samples, 0.57%)</title><rect x="6.8966%" y="245" width="0.5747%" height="15" fill="rgb(210,31,41)" fg:x="12" fg:w="1"/><text x="7.1466%" y="255.50"></text></g><g><title>dyld`ImageLoaderMachOCompressed::resolveTwolevel (1 samples, 0.57%)</title><rect x="6.8966%" y="229" width="0.5747%" height="15" fill="rgb(221,200,47)" fg:x="12" fg:w="1"/><text x="7.1466%" y="239.50"></text></g><g><title>dyld`ImageLoader::findExportedSymbolAddress (1 samples, 0.57%)</title><rect x="6.8966%" y="213" width="0.5747%" height="15" fill="rgb(226,26,5)" fg:x="12" fg:w="1"/><text x="7.1466%" y="223.50"></text></g><g><title>dyld`ImageLoaderMachO::findExportedSymbol (1 samples, 0.57%)</title><rect x="6.8966%" y="197" width="0.5747%" height="15" fill="rgb(249,33,26)" fg:x="12" fg:w="1"/><text x="7.1466%" y="207.50"></text></g><g><title>dyld`ImageLoaderMachO::findExportedSymbol (1 samples, 0.57%)</title><rect x="6.8966%" y="181" width="0.5747%" height="15" fill="rgb(235,183,28)" fg:x="12" fg:w="1"/><text x="7.1466%" y="191.50"></text></g><g><title>dyld`ImageLoaderMachOCompressed::libReExported (1 samples, 0.57%)</title><rect x="6.8966%" y="165" width="0.5747%" height="15" fill="rgb(221,5,38)" fg:x="12" fg:w="1"/><text x="7.1466%" y="175.50"></text></g><g><title>libsystem_c.dylib`isatty (1 samples, 0.57%)</title><rect x="7.4713%" y="293" width="0.5747%" height="15" fill="rgb(247,18,42)" fg:x="13" fg:w="1"/><text x="7.7213%" y="303.50"></text></g><g><title>libsystem_kernel.dylib`__ioctl (1 samples, 0.57%)</title><rect x="7.4713%" y="277" width="0.5747%" height="15" fill="rgb(241,131,45)" fg:x="13" fg:w="1"/><text x="7.7213%" y="287.50"></text></g><g><title>libsystem_c.dylib`tcsetattr (51 samples, 29.31%)</title><rect x="8.0460%" y="293" width="29.3103%" height="15" fill="rgb(249,31,29)" fg:x="14" fg:w="51"/><text x="8.2960%" y="303.50">libsystem_c.dylib`tcsetattr</text></g><g><title>libsystem_kernel.dylib`__ioctl (51 samples, 29.31%)</title><rect x="8.0460%" y="277" width="29.3103%" height="15" fill="rgb(225,111,53)" fg:x="14" fg:w="51"/><text x="8.2960%" y="287.50">libsystem_kernel.dylib`__ioctl</text></g><g><title>libsystem_kernel.dylib`__ioctl (1 samples, 0.57%)</title><rect x="37.3563%" y="293" width="0.5747%" height="15" fill="rgb(238,160,17)" fg:x="65" fg:w="1"/><text x="37.6063%" y="303.50"></text></g><g><title>libsystem_kernel.dylib`poll (20 samples, 11.49%)</title><rect x="37.9310%" y="293" width="11.4943%" height="15" fill="rgb(214,148,48)" fg:x="66" fg:w="20"/><text x="38.1810%" y="303.50">libsystem_kernel...</text></g><g><title>mine`DYLD-STUB$$poll (1 samples, 0.57%)</title><rect x="49.4253%" y="293" width="0.5747%" height="15" fill="rgb(232,36,49)" fg:x="86" fg:w="1"/><text x="49.6753%" y="303.50"></text></g><g><title>libsystem_c.dylib`isatty (2 samples, 1.15%)</title><rect x="50.0000%" y="277" width="1.1494%" height="15" fill="rgb(209,103,24)" fg:x="87" fg:w="2"/><text x="50.2500%" y="287.50"></text></g><g><title>libsystem_kernel.dylib`__ioctl (2 samples, 1.15%)</title><rect x="50.0000%" y="261" width="1.1494%" height="15" fill="rgb(229,88,8)" fg:x="87" fg:w="2"/><text x="50.2500%" y="271.50"></text></g><g><title>libsystem_c.dylib`tcsetattr (9 samples, 5.17%)</title><rect x="51.1494%" y="277" width="5.1724%" height="15" fill="rgb(213,181,19)" fg:x="89" fg:w="9"/><text x="51.3994%" y="287.50">libsys..</text></g><g><title>libsystem_kernel.dylib`__ioctl (9 samples, 5.17%)</title><rect x="51.1494%" y="261" width="5.1724%" height="15" fill="rgb(254,191,54)" fg:x="89" fg:w="9"/><text x="51.3994%" y="271.50">libsys..</text></g><g><title>mine`console::term::Term::read_key (96 samples, 55.17%)</title><rect x="1.7241%" y="325" width="55.1724%" height="15" fill="rgb(241,83,37)" fg:x="3" fg:w="96"/><text x="1.9741%" y="335.50">mine`console::term::Term::read_key</text></g><g><title>mine`console::unix_term::read_single_key (86 samples, 49.43%)</title><rect x="7.4713%" y="309" width="49.4253%" height="15" fill="rgb(233,36,39)" fg:x="13" fg:w="86"/><text x="7.7213%" y="319.50">mine`console::unix_term::read_single_key</text></g><g><title>mine`console::unix_term::read_single_key (12 samples, 6.90%)</title><rect x="50.0000%" y="293" width="6.8966%" height="15" fill="rgb(226,3,54)" fg:x="87" fg:w="12"/><text x="50.2500%" y="303.50">mine`cons..</text></g><g><title>libsystem_kernel.dylib`poll (1 samples, 0.57%)</title><rect x="56.3218%" y="277" width="0.5747%" height="15" fill="rgb(245,192,40)" fg:x="98" fg:w="1"/><text x="56.5718%" y="287.50"></text></g><g><title>mine`console::term::Term::write_str (1 samples, 0.57%)</title><rect x="56.8966%" y="325" width="0.5747%" height="15" fill="rgb(238,167,29)" fg:x="99" fg:w="1"/><text x="57.1466%" y="335.50"></text></g><g><title>mine`console::term::Term::write_through (1 samples, 0.57%)</title><rect x="57.4713%" y="325" width="0.5747%" height="15" fill="rgb(232,182,51)" fg:x="100" fg:w="1"/><text x="57.7213%" y="335.50"></text></g><g><title>mine`&lt;std::io::stdio::Stdout as std::io::Write&gt;::flush (1 samples, 0.57%)</title><rect x="57.4713%" y="309" width="0.5747%" height="15" fill="rgb(231,60,39)" fg:x="100" fg:w="1"/><text x="57.7213%" y="319.50"></text></g><g><title>mine`&lt;&amp;std::io::stdio::Stdout as std::io::Write&gt;::flush (1 samples, 0.57%)</title><rect x="57.4713%" y="293" width="0.5747%" height="15" fill="rgb(208,69,12)" fg:x="100" fg:w="1"/><text x="57.7213%" y="303.50"></text></g><g><title>libsystem_kernel.dylib`write (1 samples, 0.57%)</title><rect x="57.4713%" y="277" width="0.5747%" height="15" fill="rgb(235,93,37)" fg:x="100" fg:w="1"/><text x="57.7213%" y="287.50"></text></g><g><title>mine`console::utils::style (1 samples, 0.57%)</title><rect x="58.0460%" y="325" width="0.5747%" height="15" fill="rgb(213,116,39)" fg:x="101" fg:w="1"/><text x="58.2960%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`szone_free_definite_size (1 samples, 0.57%)</title><rect x="58.6207%" y="293" width="0.5747%" height="15" fill="rgb(222,207,29)" fg:x="102" fg:w="1"/><text x="58.8707%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`free (1 samples, 0.57%)</title><rect x="60.3448%" y="277" width="0.5747%" height="15" fill="rgb(206,96,30)" fg:x="105" fg:w="1"/><text x="60.5948%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (1 samples, 0.57%)</title><rect x="60.3448%" y="261" width="0.5747%" height="15" fill="rgb(218,138,4)" fg:x="105" fg:w="1"/><text x="60.5948%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (3 samples, 1.72%)</title><rect x="60.9195%" y="277" width="1.7241%" height="15" fill="rgb(250,191,14)" fg:x="106" fg:w="3"/><text x="61.1695%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (2 samples, 1.15%)</title><rect x="61.4943%" y="261" width="1.1494%" height="15" fill="rgb(239,60,40)" fg:x="107" fg:w="2"/><text x="61.7443%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (1 samples, 0.57%)</title><rect x="62.0690%" y="245" width="0.5747%" height="15" fill="rgb(206,27,48)" fg:x="108" fg:w="1"/><text x="62.3190%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`free (3 samples, 1.72%)</title><rect x="64.3678%" y="229" width="1.7241%" height="15" fill="rgb(225,35,8)" fg:x="112" fg:w="3"/><text x="64.6178%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (1 samples, 0.57%)</title><rect x="65.5172%" y="213" width="0.5747%" height="15" fill="rgb(250,213,24)" fg:x="114" fg:w="1"/><text x="65.7672%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (1 samples, 0.57%)</title><rect x="65.5172%" y="197" width="0.5747%" height="15" fill="rgb(247,123,22)" fg:x="114" fg:w="1"/><text x="65.7672%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (4 samples, 2.30%)</title><rect x="66.0920%" y="229" width="2.2989%" height="15" fill="rgb(231,138,38)" fg:x="115" fg:w="4"/><text x="66.3420%" y="239.50">l..</text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (3 samples, 1.72%)</title><rect x="66.6667%" y="213" width="1.7241%" height="15" fill="rgb(231,145,46)" fg:x="116" fg:w="3"/><text x="66.9167%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (3 samples, 1.72%)</title><rect x="66.6667%" y="197" width="1.7241%" height="15" fill="rgb(251,118,11)" fg:x="116" fg:w="3"/><text x="66.9167%" y="207.50"></text></g><g><title>mine`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.57%)</title><rect x="68.3908%" y="229" width="0.5747%" height="15" fill="rgb(217,147,25)" fg:x="119" fg:w="1"/><text x="68.6408%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`malloc (1 samples, 0.57%)</title><rect x="68.3908%" y="213" width="0.5747%" height="15" fill="rgb(247,81,37)" fg:x="119" fg:w="1"/><text x="68.6408%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_malloc (1 samples, 0.57%)</title><rect x="68.3908%" y="197" width="0.5747%" height="15" fill="rgb(209,12,38)" fg:x="119" fg:w="1"/><text x="68.6408%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (1 samples, 0.57%)</title><rect x="68.3908%" y="181" width="0.5747%" height="15" fill="rgb(227,1,9)" fg:x="119" fg:w="1"/><text x="68.6408%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (1 samples, 0.57%)</title><rect x="68.3908%" y="165" width="0.5747%" height="15" fill="rgb(248,47,43)" fg:x="119" fg:w="1"/><text x="68.6408%" y="175.50"></text></g><g><title>mine`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 1.15%)</title><rect x="68.9655%" y="229" width="1.1494%" height="15" fill="rgb(221,10,30)" fg:x="120" fg:w="2"/><text x="69.2155%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (1 samples, 0.57%)</title><rect x="69.5402%" y="213" width="0.5747%" height="15" fill="rgb(210,229,1)" fg:x="121" fg:w="1"/><text x="69.7902%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (1 samples, 0.57%)</title><rect x="69.5402%" y="197" width="0.5747%" height="15" fill="rgb(222,148,37)" fg:x="121" fg:w="1"/><text x="69.7902%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (1 samples, 0.57%)</title><rect x="69.5402%" y="181" width="0.5747%" height="15" fill="rgb(234,67,33)" fg:x="121" fg:w="1"/><text x="69.7902%" y="191.50"></text></g><g><title>mine`alloc::collections::btree::navigate::_&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::deallocating_next_unchecked (1 samples, 0.57%)</title><rect x="70.1149%" y="229" width="0.5747%" height="15" fill="rgb(247,98,35)" fg:x="122" fg:w="1"/><text x="70.3649%" y="239.50"></text></g><g><title>mine`alloc::str::_&lt;impl alloc::slice::Concat&lt;str&gt; for [S]&gt;::concat (1 samples, 0.57%)</title><rect x="70.6897%" y="229" width="0.5747%" height="15" fill="rgb(247,138,52)" fg:x="123" fg:w="1"/><text x="70.9397%" y="239.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (1 samples, 0.57%)</title><rect x="70.6897%" y="213" width="0.5747%" height="15" fill="rgb(213,79,30)" fg:x="123" fg:w="1"/><text x="70.9397%" y="223.50"></text></g><g><title>mine`&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.57%)</title><rect x="72.4138%" y="197" width="0.5747%" height="15" fill="rgb(246,177,23)" fg:x="126" fg:w="1"/><text x="72.6638%" y="207.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (1 samples, 0.57%)</title><rect x="72.9885%" y="181" width="0.5747%" height="15" fill="rgb(230,62,27)" fg:x="127" fg:w="1"/><text x="73.2385%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`malloc (1 samples, 0.57%)</title><rect x="74.1379%" y="133" width="0.5747%" height="15" fill="rgb(216,154,8)" fg:x="129" fg:w="1"/><text x="74.3879%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_malloc (1 samples, 0.57%)</title><rect x="74.1379%" y="117" width="0.5747%" height="15" fill="rgb(244,35,45)" fg:x="129" fg:w="1"/><text x="74.3879%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (1 samples, 0.57%)</title><rect x="74.1379%" y="101" width="0.5747%" height="15" fill="rgb(251,115,12)" fg:x="129" fg:w="1"/><text x="74.3879%" y="111.50"></text></g><g><title>mine`&lt;&amp;mut W as core::fmt::Write&gt;::write_str (3 samples, 1.72%)</title><rect x="73.5632%" y="181" width="1.7241%" height="15" fill="rgb(240,54,50)" fg:x="128" fg:w="3"/><text x="73.8132%" y="191.50"></text></g><g><title>mine`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (3 samples, 1.72%)</title><rect x="73.5632%" y="165" width="1.7241%" height="15" fill="rgb(233,84,52)" fg:x="128" fg:w="3"/><text x="73.8132%" y="175.50"></text></g><g><title>mine`alloc::raw_vec::finish_grow (2 samples, 1.15%)</title><rect x="74.1379%" y="149" width="1.1494%" height="15" fill="rgb(207,117,47)" fg:x="129" fg:w="2"/><text x="74.3879%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_malloc (1 samples, 0.57%)</title><rect x="74.7126%" y="133" width="0.5747%" height="15" fill="rgb(249,43,39)" fg:x="130" fg:w="1"/><text x="74.9626%" y="143.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (1 samples, 0.57%)</title><rect x="77.5862%" y="133" width="0.5747%" height="15" fill="rgb(209,38,44)" fg:x="135" fg:w="1"/><text x="77.8362%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`malloc (1 samples, 0.57%)</title><rect x="78.7356%" y="101" width="0.5747%" height="15" fill="rgb(236,212,23)" fg:x="137" fg:w="1"/><text x="78.9856%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_malloc (1 samples, 0.57%)</title><rect x="78.7356%" y="85" width="0.5747%" height="15" fill="rgb(242,79,21)" fg:x="137" fg:w="1"/><text x="78.9856%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (1 samples, 0.57%)</title><rect x="78.7356%" y="69" width="0.5747%" height="15" fill="rgb(211,96,35)" fg:x="137" fg:w="1"/><text x="78.9856%" y="79.50"></text></g><g><title>mine`&lt;&amp;mut W as core::fmt::Write&gt;::write_str (8 samples, 4.60%)</title><rect x="77.0115%" y="149" width="4.5977%" height="15" fill="rgb(253,215,40)" fg:x="134" fg:w="8"/><text x="77.2615%" y="159.50">mine`..</text></g><g><title>mine`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (6 samples, 3.45%)</title><rect x="78.1609%" y="133" width="3.4483%" height="15" fill="rgb(211,81,21)" fg:x="136" fg:w="6"/><text x="78.4109%" y="143.50">min..</text></g><g><title>mine`alloc::raw_vec::finish_grow (5 samples, 2.87%)</title><rect x="78.7356%" y="117" width="2.8736%" height="15" fill="rgb(208,190,38)" fg:x="137" fg:w="5"/><text x="78.9856%" y="127.50">mi..</text></g><g><title>libsystem_malloc.dylib`realloc (4 samples, 2.30%)</title><rect x="79.3103%" y="101" width="2.2989%" height="15" fill="rgb(235,213,38)" fg:x="138" fg:w="4"/><text x="79.5603%" y="111.50">l..</text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (3 samples, 1.72%)</title><rect x="79.8851%" y="85" width="1.7241%" height="15" fill="rgb(237,122,38)" fg:x="139" fg:w="3"/><text x="80.1351%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (3 samples, 1.72%)</title><rect x="79.8851%" y="69" width="1.7241%" height="15" fill="rgb(244,218,35)" fg:x="139" fg:w="3"/><text x="80.1351%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`tiny_try_realloc_in_place (1 samples, 0.57%)</title><rect x="81.0345%" y="53" width="0.5747%" height="15" fill="rgb(240,68,47)" fg:x="141" fg:w="1"/><text x="81.2845%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (1 samples, 0.57%)</title><rect x="81.0345%" y="37" width="0.5747%" height="15" fill="rgb(210,16,53)" fg:x="141" fg:w="1"/><text x="81.2845%" y="47.50"></text></g><g><title>mine`&lt;&amp;mut W as core::fmt::Write&gt;::write_str (3 samples, 1.72%)</title><rect x="81.6092%" y="133" width="1.7241%" height="15" fill="rgb(235,124,12)" fg:x="142" fg:w="3"/><text x="81.8592%" y="143.50"></text></g><g><title>mine`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.57%)</title><rect x="82.7586%" y="117" width="0.5747%" height="15" fill="rgb(224,169,11)" fg:x="144" fg:w="1"/><text x="83.0086%" y="127.50"></text></g><g><title>mine`core::fmt::Formatter::write_fmt (22 samples, 12.64%)</title><rect x="71.2644%" y="229" width="12.6437%" height="15" fill="rgb(250,166,2)" fg:x="124" fg:w="22"/><text x="71.5144%" y="239.50">mine`core::fmt::For..</text></g><g><title>mine`core::fmt::write (21 samples, 12.07%)</title><rect x="71.8391%" y="213" width="12.0690%" height="15" fill="rgb(242,216,29)" fg:x="125" fg:w="21"/><text x="72.0891%" y="223.50">mine`core::fmt::wr..</text></g><g><title>mine`&lt;console::utils::StyledObject&lt;D&gt; as core::fmt::Display&gt;::fmt (19 samples, 10.92%)</title><rect x="72.9885%" y="197" width="10.9195%" height="15" fill="rgb(230,116,27)" fg:x="127" fg:w="19"/><text x="73.2385%" y="207.50">mine`&lt;console::u..</text></g><g><title>mine`core::fmt::Formatter::write_fmt (15 samples, 8.62%)</title><rect x="75.2874%" y="181" width="8.6207%" height="15" fill="rgb(228,99,48)" fg:x="131" fg:w="15"/><text x="75.5374%" y="191.50">mine`core::f..</text></g><g><title>mine`core::fmt::write (15 samples, 8.62%)</title><rect x="75.2874%" y="165" width="8.6207%" height="15" fill="rgb(253,11,6)" fg:x="131" fg:w="15"/><text x="75.5374%" y="175.50">mine`core::f..</text></g><g><title>mine`core::fmt::num::imp::_&lt;impl core::fmt::Display for u64&gt;::fmt (4 samples, 2.30%)</title><rect x="81.6092%" y="149" width="2.2989%" height="15" fill="rgb(247,143,39)" fg:x="142" fg:w="4"/><text x="81.8592%" y="159.50">m..</text></g><g><title>mine`core::fmt::Formatter::pad_integral (1 samples, 0.57%)</title><rect x="83.3333%" y="133" width="0.5747%" height="15" fill="rgb(236,97,10)" fg:x="145" fg:w="1"/><text x="83.5833%" y="143.50"></text></g><g><title>mine`core::fmt::Formatter::pad_integral::write_prefix (1 samples, 0.57%)</title><rect x="83.3333%" y="117" width="0.5747%" height="15" fill="rgb(233,208,19)" fg:x="145" fg:w="1"/><text x="83.5833%" y="127.50"></text></g><g><title>mine`alloc::fmt::format (40 samples, 22.99%)</title><rect x="62.6437%" y="277" width="22.9885%" height="15" fill="rgb(216,164,2)" fg:x="109" fg:w="40"/><text x="62.8937%" y="287.50">mine`alloc::fmt::format</text></g><g><title>mine`core::fmt::write (40 samples, 22.99%)</title><rect x="62.6437%" y="261" width="22.9885%" height="15" fill="rgb(220,129,5)" fg:x="109" fg:w="40"/><text x="62.8937%" y="271.50">mine`core::fmt::write</text></g><g><title>mine`&lt;mine::cell::Cell as core::fmt::Display&gt;::fmt (38 samples, 21.84%)</title><rect x="63.7931%" y="245" width="21.8391%" height="15" fill="rgb(242,17,10)" fg:x="111" fg:w="38"/><text x="64.0431%" y="255.50">mine`&lt;mine::cell::Cell as core::fmt..</text></g><g><title>mine`core::fmt::num::imp::_&lt;impl core::fmt::Display for u64&gt;::fmt (3 samples, 1.72%)</title><rect x="83.9080%" y="229" width="1.7241%" height="15" fill="rgb(242,107,0)" fg:x="146" fg:w="3"/><text x="84.1580%" y="239.50"></text></g><g><title>mine`&lt;alloc::string::String as core::fmt::Write&gt;::write_str (3 samples, 1.72%)</title><rect x="83.9080%" y="213" width="1.7241%" height="15" fill="rgb(251,28,31)" fg:x="146" fg:w="3"/><text x="84.1580%" y="223.50"></text></g><g><title>mine`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (3 samples, 1.72%)</title><rect x="83.9080%" y="197" width="1.7241%" height="15" fill="rgb(233,223,10)" fg:x="146" fg:w="3"/><text x="84.1580%" y="207.50"></text></g><g><title>mine`alloc::raw_vec::finish_grow (3 samples, 1.72%)</title><rect x="83.9080%" y="181" width="1.7241%" height="15" fill="rgb(215,21,27)" fg:x="146" fg:w="3"/><text x="84.1580%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`malloc (3 samples, 1.72%)</title><rect x="83.9080%" y="165" width="1.7241%" height="15" fill="rgb(232,23,21)" fg:x="146" fg:w="3"/><text x="84.1580%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_malloc (2 samples, 1.15%)</title><rect x="84.4828%" y="149" width="1.1494%" height="15" fill="rgb(244,5,23)" fg:x="147" fg:w="2"/><text x="84.7328%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (2 samples, 1.15%)</title><rect x="84.4828%" y="133" width="1.1494%" height="15" fill="rgb(226,81,46)" fg:x="147" fg:w="2"/><text x="84.7328%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (2 samples, 1.15%)</title><rect x="84.4828%" y="117" width="1.1494%" height="15" fill="rgb(247,70,30)" fg:x="147" fg:w="2"/><text x="84.7328%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (3 samples, 1.72%)</title><rect x="85.6322%" y="197" width="1.7241%" height="15" fill="rgb(212,68,19)" fg:x="149" fg:w="3"/><text x="85.8822%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (2 samples, 1.15%)</title><rect x="86.2069%" y="181" width="1.1494%" height="15" fill="rgb(240,187,13)" fg:x="150" fg:w="2"/><text x="86.4569%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (1 samples, 0.57%)</title><rect x="86.7816%" y="165" width="0.5747%" height="15" fill="rgb(223,113,26)" fg:x="151" fg:w="1"/><text x="87.0316%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (1 samples, 0.57%)</title><rect x="87.3563%" y="197" width="0.5747%" height="15" fill="rgb(206,192,2)" fg:x="152" fg:w="1"/><text x="87.6063%" y="207.50"></text></g><g><title>mine`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (5 samples, 2.87%)</title><rect x="85.6322%" y="277" width="2.8736%" height="15" fill="rgb(241,108,4)" fg:x="149" fg:w="5"/><text x="85.8822%" y="287.50">mi..</text></g><g><title>mine`alloc::raw_vec::finish_grow (5 samples, 2.87%)</title><rect x="85.6322%" y="261" width="2.8736%" height="15" fill="rgb(247,173,49)" fg:x="149" fg:w="5"/><text x="85.8822%" y="271.50">mi..</text></g><g><title>libsystem_malloc.dylib`realloc (5 samples, 2.87%)</title><rect x="85.6322%" y="245" width="2.8736%" height="15" fill="rgb(224,114,35)" fg:x="149" fg:w="5"/><text x="85.8822%" y="255.50">li..</text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (5 samples, 2.87%)</title><rect x="85.6322%" y="229" width="2.8736%" height="15" fill="rgb(245,159,27)" fg:x="149" fg:w="5"/><text x="85.8822%" y="239.50">li..</text></g><g><title>libsystem_malloc.dylib`szone_realloc (5 samples, 2.87%)</title><rect x="85.6322%" y="213" width="2.8736%" height="15" fill="rgb(245,172,44)" fg:x="149" fg:w="5"/><text x="85.8822%" y="223.50">li..</text></g><g><title>libsystem_malloc.dylib`tiny_try_realloc_in_place (1 samples, 0.57%)</title><rect x="87.9310%" y="197" width="0.5747%" height="15" fill="rgb(236,23,11)" fg:x="153" fg:w="1"/><text x="88.1810%" y="207.50"></text></g><g><title>mine`alloc::str::join_generic_copy (1 samples, 0.57%)</title><rect x="88.5057%" y="277" width="0.5747%" height="15" fill="rgb(205,117,38)" fg:x="154" fg:w="1"/><text x="88.7557%" y="287.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (1 samples, 0.57%)</title><rect x="88.5057%" y="261" width="0.5747%" height="15" fill="rgb(237,72,25)" fg:x="154" fg:w="1"/><text x="88.7557%" y="271.50"></text></g><g><title>libsystem_kernel.dylib`write (13 samples, 7.47%)</title><rect x="89.6552%" y="181" width="7.4713%" height="15" fill="rgb(244,70,9)" fg:x="156" fg:w="13"/><text x="89.9052%" y="191.50">libsystem_..</text></g><g><title>mine`core::fmt::Formatter::write_fmt (16 samples, 9.20%)</title><rect x="89.0805%" y="277" width="9.1954%" height="15" fill="rgb(217,125,39)" fg:x="155" fg:w="16"/><text x="89.3305%" y="287.50">mine`core::fm..</text></g><g><title>mine`core::fmt::write (16 samples, 9.20%)</title><rect x="89.0805%" y="261" width="9.1954%" height="15" fill="rgb(235,36,10)" fg:x="155" fg:w="16"/><text x="89.3305%" y="271.50">mine`core::fm..</text></g><g><title>mine`&lt;std::io::Write::write_fmt::Adapter&lt;T&gt; as core::fmt::Write&gt;::write_str (15 samples, 8.62%)</title><rect x="89.6552%" y="245" width="8.6207%" height="15" fill="rgb(251,123,47)" fg:x="156" fg:w="15"/><text x="89.9052%" y="255.50">mine`&lt;std::i..</text></g><g><title>mine`&lt;console::term::Term as std::io::Write&gt;::write (15 samples, 8.62%)</title><rect x="89.6552%" y="229" width="8.6207%" height="15" fill="rgb(221,13,13)" fg:x="156" fg:w="15"/><text x="89.9052%" y="239.50">mine`&lt;consol..</text></g><g><title>mine`console::term::Term::write_through (15 samples, 8.62%)</title><rect x="89.6552%" y="213" width="8.6207%" height="15" fill="rgb(238,131,9)" fg:x="156" fg:w="15"/><text x="89.9052%" y="223.50">mine`console..</text></g><g><title>mine`&lt;std::io::stdio::Stdout as std::io::Write&gt;::write_all (15 samples, 8.62%)</title><rect x="89.6552%" y="197" width="8.6207%" height="15" fill="rgb(211,50,8)" fg:x="156" fg:w="15"/><text x="89.9052%" y="207.50">mine`&lt;std::i..</text></g><g><title>mine`&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all (2 samples, 1.15%)</title><rect x="97.1264%" y="181" width="1.1494%" height="15" fill="rgb(245,182,24)" fg:x="169" fg:w="2"/><text x="97.3764%" y="191.50"></text></g><g><title>mine`std::io::Write::write_fmt (70 samples, 40.23%)</title><rect x="58.6207%" y="325" width="40.2299%" height="15" fill="rgb(242,14,37)" fg:x="102" fg:w="70"/><text x="58.8707%" y="335.50">mine`std::io::Write::write_fmt</text></g><g><title>mine`core::fmt::write (70 samples, 40.23%)</title><rect x="58.6207%" y="309" width="40.2299%" height="15" fill="rgb(246,228,12)" fg:x="102" fg:w="70"/><text x="58.8707%" y="319.50">mine`core::fmt::write</text></g><g><title>mine`&lt;mine::field::Field as core::fmt::Display&gt;::fmt (69 samples, 39.66%)</title><rect x="59.1954%" y="293" width="39.6552%" height="15" fill="rgb(213,55,15)" fg:x="103" fg:w="69"/><text x="59.4454%" y="303.50">mine`&lt;mine::field::Field as core::fmt::Display&gt;::fmt</text></g><g><title>mine`mine::cell::Cell::apply_cursor_styling (1 samples, 0.57%)</title><rect x="98.2759%" y="277" width="0.5747%" height="15" fill="rgb(209,9,3)" fg:x="171" fg:w="1"/><text x="98.5259%" y="287.50"></text></g><g><title>mine`&lt;console::utils::StyledObject&lt;D&gt; as core::fmt::Display&gt;::fmt (1 samples, 0.57%)</title><rect x="98.2759%" y="261" width="0.5747%" height="15" fill="rgb(230,59,30)" fg:x="171" fg:w="1"/><text x="98.5259%" y="271.50"></text></g><g><title>mine`core::fmt::Formatter::write_fmt (1 samples, 0.57%)</title><rect x="98.2759%" y="245" width="0.5747%" height="15" fill="rgb(209,121,21)" fg:x="171" fg:w="1"/><text x="98.5259%" y="255.50"></text></g><g><title>mine`core::fmt::write (1 samples, 0.57%)</title><rect x="98.2759%" y="229" width="0.5747%" height="15" fill="rgb(220,109,13)" fg:x="171" fg:w="1"/><text x="98.5259%" y="239.50"></text></g><g><title>mine`&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.57%)</title><rect x="98.2759%" y="213" width="0.5747%" height="15" fill="rgb(232,18,1)" fg:x="171" fg:w="1"/><text x="98.5259%" y="223.50"></text></g><g><title>mine`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.57%)</title><rect x="98.2759%" y="197" width="0.5747%" height="15" fill="rgb(215,41,42)" fg:x="171" fg:w="1"/><text x="98.5259%" y="207.50"></text></g><g><title>mine`alloc::raw_vec::finish_grow (1 samples, 0.57%)</title><rect x="98.2759%" y="181" width="0.5747%" height="15" fill="rgb(224,123,36)" fg:x="171" fg:w="1"/><text x="98.5259%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`realloc (1 samples, 0.57%)</title><rect x="98.2759%" y="165" width="0.5747%" height="15" fill="rgb(240,125,3)" fg:x="171" fg:w="1"/><text x="98.5259%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (1 samples, 0.57%)</title><rect x="98.2759%" y="149" width="0.5747%" height="15" fill="rgb(205,98,50)" fg:x="171" fg:w="1"/><text x="98.5259%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (1 samples, 0.57%)</title><rect x="98.2759%" y="133" width="0.5747%" height="15" fill="rgb(205,185,37)" fg:x="171" fg:w="1"/><text x="98.5259%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (1 samples, 0.57%)</title><rect x="98.2759%" y="117" width="0.5747%" height="15" fill="rgb(238,207,15)" fg:x="171" fg:w="1"/><text x="98.5259%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (1 samples, 0.57%)</title><rect x="98.2759%" y="101" width="0.5747%" height="15" fill="rgb(213,199,42)" fg:x="171" fg:w="1"/><text x="98.5259%" y="111.50"></text></g><g><title>mine`std::rt::lang_start::_{{closure}} (172 samples, 98.85%)</title><rect x="0.5747%" y="373" width="98.8506%" height="15" fill="rgb(235,201,11)" fg:x="1" fg:w="172"/><text x="0.8247%" y="383.50">mine`std::rt::lang_start::_{{closure}}</text></g><g><title>mine`std::sys_common::backtrace::__rust_begin_short_backtrace (172 samples, 98.85%)</title><rect x="0.5747%" y="357" width="98.8506%" height="15" fill="rgb(207,46,11)" fg:x="1" fg:w="172"/><text x="0.8247%" y="367.50">mine`std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>mine`mine::main (172 samples, 98.85%)</title><rect x="0.5747%" y="341" width="98.8506%" height="15" fill="rgb(241,35,35)" fg:x="1" fg:w="172"/><text x="0.8247%" y="351.50">mine`mine::main</text></g><g><title>mine`std::io::stdio::_print (1 samples, 0.57%)</title><rect x="98.8506%" y="325" width="0.5747%" height="15" fill="rgb(243,32,47)" fg:x="172" fg:w="1"/><text x="99.1006%" y="335.50"></text></g><g><title>mine`&lt;&amp;std::io::stdio::Stdout as std::io::Write&gt;::write_fmt (1 samples, 0.57%)</title><rect x="98.8506%" y="309" width="0.5747%" height="15" fill="rgb(247,202,23)" fg:x="172" fg:w="1"/><text x="99.1006%" y="319.50"></text></g><g><title>mine`core::fmt::write (1 samples, 0.57%)</title><rect x="98.8506%" y="293" width="0.5747%" height="15" fill="rgb(219,102,11)" fg:x="172" fg:w="1"/><text x="99.1006%" y="303.50"></text></g><g><title>mine`&lt;std::io::Write::write_fmt::Adapter&lt;T&gt; as core::fmt::Write&gt;::write_str (1 samples, 0.57%)</title><rect x="98.8506%" y="277" width="0.5747%" height="15" fill="rgb(243,110,44)" fg:x="172" fg:w="1"/><text x="99.1006%" y="287.50"></text></g><g><title>mine`&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all (1 samples, 0.57%)</title><rect x="98.8506%" y="261" width="0.5747%" height="15" fill="rgb(222,74,54)" fg:x="172" fg:w="1"/><text x="99.1006%" y="271.50"></text></g><g><title>libsystem_kernel.dylib`write (1 samples, 0.57%)</title><rect x="98.8506%" y="245" width="0.5747%" height="15" fill="rgb(216,99,12)" fg:x="172" fg:w="1"/><text x="99.1006%" y="255.50"></text></g><g><title>all (174 samples, 100%)</title><rect x="0.0000%" y="453" width="100.0000%" height="15" fill="rgb(226,22,26)" fg:x="0" fg:w="174"/><text x="0.2500%" y="463.50"></text></g><g><title>mine`0x1 (174 samples, 100.00%)</title><rect x="0.0000%" y="437" width="100.0000%" height="15" fill="rgb(217,163,10)" fg:x="0" fg:w="174"/><text x="0.2500%" y="447.50">mine`0x1</text></g><g><title>mine`start (173 samples, 99.43%)</title><rect x="0.5747%" y="421" width="99.4253%" height="15" fill="rgb(213,25,53)" fg:x="1" fg:w="173"/><text x="0.8247%" y="431.50">mine`start</text></g><g><title>mine`main (173 samples, 99.43%)</title><rect x="0.5747%" y="405" width="99.4253%" height="15" fill="rgb(252,105,26)" fg:x="1" fg:w="173"/><text x="0.8247%" y="415.50">mine`main</text></g><g><title>mine`std::rt::lang_start_internal (173 samples, 99.43%)</title><rect x="0.5747%" y="389" width="99.4253%" height="15" fill="rgb(220,39,43)" fg:x="1" fg:w="173"/><text x="0.8247%" y="399.50">mine`std::rt::lang_start_internal</text></g><g><title>mine`std::thread::Thread::new (1 samples, 0.57%)</title><rect x="99.4253%" y="373" width="0.5747%" height="15" fill="rgb(229,68,48)" fg:x="173" fg:w="1"/><text x="99.6753%" y="383.50"></text></g><g><title>mine`0x10d5eb028 (1 samples, 0.57%)</title><rect x="99.4253%" y="357" width="0.5747%" height="15" fill="rgb(252,8,32)" fg:x="173" fg:w="1"/><text x="99.6753%" y="367.50"></text></g><g><title>libdyld.dylib`dyld_stub_binder (1 samples, 0.57%)</title><rect x="99.4253%" y="341" width="0.5747%" height="15" fill="rgb(223,20,43)" fg:x="173" fg:w="1"/><text x="99.6753%" y="351.50"></text></g><g><title>dyld`dyld::fastBindLazySymbol (1 samples, 0.57%)</title><rect x="99.4253%" y="325" width="0.5747%" height="15" fill="rgb(229,81,49)" fg:x="173" fg:w="1"/><text x="99.6753%" y="335.50"></text></g><g><title>dyld`ImageLoaderMachOCompressed::doBindFastLazySymbol(unsigned int, ImageLoader::LinkContext const&amp;, void (*)(), void (*) (1 samples, 0.57%)</title><rect x="99.4253%" y="309" width="0.5747%" height="15" fill="rgb(236,28,36)" fg:x="173" fg:w="1"/><text x="99.6753%" y="319.50"></text></g><g><title>dyld`ImageLoaderMachOCompressed::resolve (1 samples, 0.57%)</title><rect x="99.4253%" y="293" width="0.5747%" height="15" fill="rgb(249,185,26)" fg:x="173" fg:w="1"/><text x="99.6753%" y="303.50"></text></g><g><title>dyld`ImageLoaderMachOCompressed::resolveTwolevel (1 samples, 0.57%)</title><rect x="99.4253%" y="277" width="0.5747%" height="15" fill="rgb(249,174,33)" fg:x="173" fg:w="1"/><text x="99.6753%" y="287.50"></text></g><g><title>dyld`ImageLoader::findExportedSymbolAddress (1 samples, 0.57%)</title><rect x="99.4253%" y="261" width="0.5747%" height="15" fill="rgb(233,201,37)" fg:x="173" fg:w="1"/><text x="99.6753%" y="271.50"></text></g><g><title>dyld`ImageLoaderMachO::findExportedSymbol (1 samples, 0.57%)</title><rect x="99.4253%" y="245" width="0.5747%" height="15" fill="rgb(221,78,26)" fg:x="173" fg:w="1"/><text x="99.6753%" y="255.50"></text></g><g><title>dyld`ImageLoaderMachO::libPath (1 samples, 0.57%)</title><rect x="99.4253%" y="229" width="0.5747%" height="15" fill="rgb(250,127,30)" fg:x="173" fg:w="1"/><text x="99.6753%" y="239.50"></text></g></svg></svg>